{"ast":null,"code":"import $ from \"jquery\";\nimport { createToast } from \"./toastController.js\";\nimport * as cookieHandler from \"./cookieHandler.js\";\nimport * as upgradeHandler from \"./cpsUpgradeHandler.js\";\nexport function clear() {\n  document.cookie = \"cookies=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\n  document.cookie = \"bakeryName=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\n  document.cookie = \"cursors=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\n  document.cookie = \"grandmas=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\n  document.cookie = \"farms=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\n  document.cookie = \"mines=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\n  location.reload();\n}\nexport function save() {\n  console.log(\"cookie stuff is happenin\");\n  createToast(\"Game saved\", 2000);\n  let timeElapsed = 0;\n  let name = $(\"#bakery-name\").text();\n  //save cookies and bakery name\n  document.cookie = `cookies=${cookieHandler.cookies}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\n  document.cookie = `bakeryName=${$(\"#bakery-name\").text()}; SameSite=None; Secure; expires=Fri, 31 Dec 9999 23:59:59 GMT`;\n  document.cookie = `cursors=${upgradeHandler.cursors}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\n  document.cookie = `grandmas=${upgradeHandler.grandmas}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\n  document.cookie = `timeElapsed=${timeElapsed}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\n}\nexport function load() {\n  cookieHandler.changeAmountOfCookies(Number(getCookie(\"cookies\")));\n  /*below is how we handle the first time loading a page*/\n\n  cookieHandler.changeAmountOfCookies(isNaN(cookieHandler.cookies) ? 0 : cookieHandler.cookies);\n  $(\"#bakery-name\").text(getCookie(\"bakeryName\"));\n  console.log(getCookie(\"bakeryName\"));\n  let cursors = Number(getCookie(\"cursors\"));\n  let grandmas = Number(getCookie(\"grandmas\"));\n  upgradeHandler.load(cursors, grandmas);\n\n  // Check if the start time is already stored in a cookie\n  let startTime = getCookie(\"startTime\");\n  if (startTime) {\n    // If the start time is stored, calculate the elapsed time since then\n    let elapsedTime = Math.floor((Date.now() - Number(startTime)) / 1000);\n    // Update the timer display with the elapsed time\n    $(\"#timer\").text(`Time: ${elapsedTime} seconds`);\n    // Start the timer with the elapsed time as the starting value\n    startTimer(elapsedTime);\n  } else {\n    // If the start time is not stored, start the timer from 0\n    startTimer(0);\n  }\n}\nfunction startTimer(startTime) {\n  // Start the timer with the specified starting time\n  let currentTime = startTime;\n  setInterval(() => {\n    currentTime++;\n    $(\"#timer\").text(`Time: ${currentTime} seconds`);\n    // Store the current time in a cookie every time it updates\n    getCookie(\"startTime\", Date.now(), 365);\n  }, 1000);\n}\nfunction getCookie(name) {\n  return document.cookie.split(\"; \").find(row => row.startsWith(`${name}=`))?.split(\"=\")[1];\n}","map":{"version":3,"names":["$","createToast","cookieHandler","upgradeHandler","clear","document","cookie","location","reload","save","console","log","timeElapsed","name","text","cookies","cursors","grandmas","load","changeAmountOfCookies","Number","getCookie","isNaN","startTime","elapsedTime","Math","floor","Date","now","startTimer","currentTime","setInterval","split","find","row","startsWith"],"sources":["C:/Users/lakho/OneDrive - southhills.edu/Documents/GitHub/CookieClickerVue/CookieClickerVue/cookie-clicker_front-end/public/js/index/gameSaveManager.js"],"sourcesContent":["import $ from \"jquery\";\r\nimport {createToast} from \"./toastController.js\";\r\nimport * as cookieHandler from \"./cookieHandler.js\"\r\nimport * as upgradeHandler from \"./cpsUpgradeHandler.js\"\r\n\r\n\r\nexport function clear()\r\n{\r\n    document.cookie = \"cookies=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\r\n    document.cookie = \"bakeryName=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\r\n    document.cookie = \"cursors=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\r\n    document.cookie = \"grandmas=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\r\n    document.cookie = \"farms=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\r\n    document.cookie = \"mines=; expires=Thu, 01 Jan 1970 00:00:00 GMT; SameSite=None; Secure;\";\r\n    location.reload();\r\n}\r\n\r\nexport function save()\r\n{\r\n    console.log(\"cookie stuff is happenin\");\r\n    createToast(\"Game saved\", 2000);\r\n    let timeElapsed = 0;\r\n    let name = $(\"#bakery-name\").text();\r\n    //save cookies and bakery name\r\n    document.cookie = `cookies=${cookieHandler.cookies}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\r\n    document.cookie = `bakeryName=${$(\"#bakery-name\").text()}; SameSite=None; Secure; expires=Fri, 31 Dec 9999 23:59:59 GMT`;\r\n    document.cookie = `cursors=${upgradeHandler.cursors}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\r\n    document.cookie = `grandmas=${upgradeHandler.grandmas}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\r\n    document.cookie = `timeElapsed=${timeElapsed}; SameSite=none; Secure; expires=Fri, 31 Dec 9999 23:59:59`;\r\n}\r\n\r\nexport function load()\r\n{\r\n    \r\n    cookieHandler.changeAmountOfCookies(Number(getCookie(\"cookies\")));\r\n    /*below is how we handle the first time loading a page*/\r\n\r\n    cookieHandler.changeAmountOfCookies(isNaN(cookieHandler.cookies) ? 0 : cookieHandler.cookies);\r\n    $(\"#bakery-name\").text(getCookie(\"bakeryName\"));\r\n    console.log(getCookie(\"bakeryName\"));\r\n    let cursors = Number(getCookie(\"cursors\"));\r\n    let grandmas = Number(getCookie(\"grandmas\"));\r\n    upgradeHandler.load(cursors,grandmas);\r\n\r\n    // Check if the start time is already stored in a cookie\r\n  let startTime = getCookie(\"startTime\");\r\n  if (startTime) {\r\n    // If the start time is stored, calculate the elapsed time since then\r\n    let elapsedTime = Math.floor((Date.now() - Number(startTime)) / 1000);\r\n    // Update the timer display with the elapsed time\r\n    $(\"#timer\").text(`Time: ${elapsedTime} seconds`);\r\n    // Start the timer with the elapsed time as the starting value\r\n    startTimer(elapsedTime);\r\n  } else {\r\n    // If the start time is not stored, start the timer from 0\r\n    startTimer(0);\r\n  }\r\n}\r\n\r\nfunction startTimer(startTime) {\r\n  // Start the timer with the specified starting time\r\n  let currentTime = startTime;\r\n  setInterval(() => {\r\n    currentTime++;\r\n    $(\"#timer\").text(`Time: ${currentTime} seconds`);\r\n    // Store the current time in a cookie every time it updates\r\n    getCookie(\"startTime\", Date.now(), 365);\r\n  }, 1000);\r\n}\r\n\r\nfunction getCookie(name)\r\n{\r\n   return document.cookie.split(\"; \").find((row) => row.startsWith(`${name}=`))?.split(\"=\")[1];\r\n}\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}